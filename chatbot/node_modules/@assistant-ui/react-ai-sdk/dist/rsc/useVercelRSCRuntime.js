"use client";

// src/rsc/useVercelRSCRuntime.tsx
import {
  useExternalMessageConverter,
  useExternalStoreRuntime
} from "@assistant-ui/react";
import { useCallback, useMemo } from "react";
import { symbolInternalRSCExtras } from "./utils/RSCThreadExtras.js";
var vercelToThreadMessage = (converter, rawMessage) => {
  const message = converter(rawMessage);
  return {
    id: message.id,
    role: message.role,
    content: [{ type: "text", text: "[Developer: Please set up RSCDisplay]" }],
    createdAt: message.createdAt
  };
};
var useVercelRSCRuntime = (adapter) => {
  const onNew = adapter.onNew;
  if (!onNew)
    throw new Error("You must pass a onNew function to useVercelRSCRuntime");
  const convertFn = useMemo(() => {
    return adapter.convertMessage?.bind(adapter) ?? ((m) => m);
  }, [adapter.convertMessage, adapter]);
  const callback = useCallback(
    (m) => {
      return vercelToThreadMessage(convertFn, m);
    },
    [convertFn]
  );
  const messages = useExternalMessageConverter({
    callback,
    isRunning: adapter.isRunning ?? false,
    messages: adapter.messages
  });
  const eAdapter = {
    isRunning: adapter.isRunning,
    messages,
    onNew,
    onEdit: adapter.onEdit,
    onReload: adapter.onReload,
    adapters: adapter.adapters,
    unstable_capabilities: {
      copy: false
    },
    extras: {
      [symbolInternalRSCExtras]: { convertFn }
    }
  };
  const runtime = useExternalStoreRuntime(eAdapter);
  return runtime;
};
export {
  useVercelRSCRuntime
};
//# sourceMappingURL=useVercelRSCRuntime.js.map