// src/ui/utils/convertMessage.ts
import {
  unstable_createMessageConverter
} from "@assistant-ui/react";
var AISDKMessageConverter = unstable_createMessageConverter(
  (message) => {
    switch (message.role) {
      case "user":
        return {
          role: "user",
          id: message.id,
          createdAt: message.createdAt,
          content: message.content,
          attachments: message.experimental_attachments?.map(
            (attachment, idx) => ({
              id: idx.toString(),
              type: "file",
              name: attachment.name ?? attachment.url,
              content: [],
              contentType: attachment.contentType ?? "unknown/unknown",
              status: { type: "complete" }
            })
          )
        };
      case "system":
        return {
          role: "system",
          id: message.id,
          createdAt: message.createdAt,
          content: message.content
        };
      case "assistant":
        return {
          role: "assistant",
          id: message.id,
          createdAt: message.createdAt,
          content: message.parts?.filter((p) => p.type !== "step-start").map((part) => {
            const type = part.type;
            switch (type) {
              case "text":
                return {
                  type: "text",
                  text: part.text
                };
              case "tool-invocation":
                return {
                  type: "tool-call",
                  toolName: part.toolInvocation.toolName,
                  toolCallId: part.toolInvocation.toolCallId,
                  argsText: JSON.stringify(part.toolInvocation.args),
                  args: part.toolInvocation.args,
                  result: part.toolInvocation.state === "result" && part.toolInvocation.result
                };
              case "reasoning":
                return {
                  type: "reasoning",
                  text: part.reasoning
                };
              case "source":
                return {
                  type: "source",
                  ...part.source
                };
              case "file":
                return {
                  type: "file",
                  data: part.data,
                  mimeType: part.mimeType
                };
              default: {
                const _unsupported2 = type;
                throw new Error(
                  `You have a message with an unsupported part type. The type ${_unsupported2} is not supported.`
                );
              }
            }
          }) ?? (message.content ? [
            {
              type: "text",
              text: message.content
            }
          ] : []),
          metadata: {
            unstable_annotations: message.annotations,
            unstable_data: Array.isArray(message.data) ? message.data : message.data ? [message.data] : void 0
          }
        };
      case "data": {
        if (!message.data || !(typeof message.data === "object") || Array.isArray(message.data))
          return [];
        const data = message.data;
        if (data.type === "tool-call") {
          return {
            role: "assistant",
            id: message.id,
            createdAt: message.createdAt,
            content: [data]
          };
        } else if (data.type === "tool-result") {
          return {
            role: "tool",
            id: message.id,
            toolCallId: data.toolCallId,
            result: data.result
          };
        }
        return [];
      }
      default:
        const _unsupported = message.role;
        throw new Error(
          `You have a message with an unsupported role. The role ${_unsupported} is not supported.`
        );
    }
  }
);
export {
  AISDKMessageConverter
};
//# sourceMappingURL=convertMessage.js.map