{"version":3,"sources":["../../../src/ui/utils/convertMessage.ts"],"sourcesContent":["import { Message } from \"@ai-sdk/ui-utils\";\nimport {\n  unstable_createMessageConverter,\n  type ReasoningContentPart,\n  type ToolCallContentPart,\n  type TextContentPart,\n  type CompleteAttachment,\n  type SourceContentPart,\n  type FileContentPart,\n} from \"@assistant-ui/react\";\n\nexport const AISDKMessageConverter = unstable_createMessageConverter(\n  (message: Message) => {\n    switch (message.role) {\n      case \"user\":\n        return {\n          role: \"user\",\n          id: message.id,\n          createdAt: message.createdAt,\n          content: message.content,\n\n          attachments: message.experimental_attachments?.map(\n            (attachment, idx) =>\n              ({\n                id: idx.toString(),\n                type: \"file\",\n                name: attachment.name ?? attachment.url,\n                content: [],\n                contentType: attachment.contentType ?? \"unknown/unknown\",\n                status: { type: \"complete\" },\n              }) satisfies CompleteAttachment,\n          ),\n        };\n\n      case \"system\":\n        return {\n          role: \"system\",\n          id: message.id,\n          createdAt: message.createdAt,\n          content: message.content,\n        };\n\n      case \"assistant\":\n        return {\n          role: \"assistant\",\n          id: message.id,\n          createdAt: message.createdAt,\n          content:\n            message.parts\n              ?.filter((p) => p.type !== \"step-start\")\n              .map((part) => {\n                const type = part.type;\n                switch (type) {\n                  case \"text\":\n                    return {\n                      type: \"text\",\n                      text: part.text,\n                    } satisfies TextContentPart;\n                  case \"tool-invocation\":\n                    return {\n                      type: \"tool-call\",\n                      toolName: part.toolInvocation.toolName,\n                      toolCallId: part.toolInvocation.toolCallId,\n                      argsText: JSON.stringify(part.toolInvocation.args),\n                      args: part.toolInvocation.args,\n                      result:\n                        part.toolInvocation.state === \"result\" &&\n                        part.toolInvocation.result,\n                    } satisfies ToolCallContentPart;\n                  case \"reasoning\":\n                    return {\n                      type: \"reasoning\",\n                      text: part.reasoning,\n                    } satisfies ReasoningContentPart;\n\n                  case \"source\":\n                    return {\n                      type: \"source\",\n                      ...part.source,\n                    } satisfies SourceContentPart;\n\n                  case \"file\":\n                    return {\n                      type: \"file\",\n                      data: part.data,\n                      mimeType: part.mimeType,\n                    } satisfies FileContentPart;\n\n                  default: {\n                    const _unsupported: never = type;\n                    throw new Error(\n                      `You have a message with an unsupported part type. The type ${_unsupported} is not supported.`,\n                    );\n                  }\n                }\n              }) ??\n            (message.content\n              ? [\n                  {\n                    type: \"text\",\n                    text: message.content,\n                  } satisfies TextContentPart,\n                ]\n              : []),\n          metadata: {\n            unstable_annotations: message.annotations,\n            unstable_data: Array.isArray(message.data)\n              ? message.data\n              : message.data\n                ? [message.data]\n                : undefined,\n          },\n        };\n\n      case \"data\": {\n        type MaybeSupportedDataMessage =\n          | { type?: \"unsafe_other\" }\n          | ToolCallContentPart\n          | {\n              type: \"tool-result\";\n              toolCallId: string;\n              result: any;\n            };\n\n        if (\n          !message.data ||\n          !(typeof message.data === \"object\") ||\n          Array.isArray(message.data)\n        )\n          return [];\n\n        const data = message.data as MaybeSupportedDataMessage;\n\n        if (data.type === \"tool-call\") {\n          return {\n            role: \"assistant\",\n            id: message.id,\n            createdAt: message.createdAt,\n            content: [data],\n          };\n        } else if (data.type === \"tool-result\") {\n          return {\n            role: \"tool\",\n            id: message.id,\n            toolCallId: data.toolCallId,\n            result: data.result,\n          };\n        }\n        return [];\n      }\n\n      default:\n        // TODO handle tool and function messages\n        const _unsupported: \"function\" | \"tool\" = message.role;\n        throw new Error(\n          `You have a message with an unsupported role. The role ${_unsupported} is not supported.`,\n        );\n    }\n  },\n);\n"],"mappings":"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","names":["_unsupported"]}