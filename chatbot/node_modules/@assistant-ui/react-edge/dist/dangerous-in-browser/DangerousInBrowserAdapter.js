// src/dangerous-in-browser/DangerousInBrowserAdapter.ts
import { toCoreMessages } from "../converters/toCoreMessages.js";
import { toLanguageModelTools } from "../converters/toLanguageModelTools.js";
import { asAsyncIterableStream } from "assistant-stream/utils";
import {
  getEdgeRuntimeStream
} from "../edge/createEdgeRuntimeAPI.js";
import {
  AssistantMessageAccumulator,
  unstable_toolResultStream
} from "assistant-stream";
var DangerousInBrowserAdapter = class {
  constructor(options) {
    this.options = options;
  }
  async *run({ messages, abortSignal, context }) {
    const res = await getEdgeRuntimeStream({
      options: this.options,
      abortSignal,
      requestData: {
        system: context.system,
        messages: toCoreMessages(messages),
        tools: context.tools ? toLanguageModelTools(context.tools) : [],
        ...context.callSettings,
        ...context.config
      }
    });
    const stream = res.pipeThrough(unstable_toolResultStream(context.tools, abortSignal)).pipeThrough(new AssistantMessageAccumulator());
    yield* asAsyncIterableStream(stream);
  }
};
export {
  DangerousInBrowserAdapter
};
//# sourceMappingURL=DangerousInBrowserAdapter.js.map