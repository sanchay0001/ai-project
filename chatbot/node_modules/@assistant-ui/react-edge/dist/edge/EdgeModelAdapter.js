// src/edge/EdgeModelAdapter.ts
import { toCoreMessages } from "../converters/toCoreMessages.js";
import { toLanguageModelTools } from "../converters/toLanguageModelTools.js";
import { toLanguageModelMessages } from "../converters/index.js";
import { z } from "zod";
import zodToJsonSchema from "zod-to-json-schema";
import {
  AssistantMessageAccumulator,
  DataStreamDecoder,
  unstable_toolResultStream
} from "assistant-stream";
import { asAsyncIterableStream } from "assistant-stream/utils";
var toAISDKTools = (tools) => {
  return Object.fromEntries(
    Object.entries(tools).map(([name, tool]) => [
      name,
      {
        ...tool.description ? { description: tool.description } : void 0,
        parameters: tool.parameters instanceof z.ZodType ? zodToJsonSchema(tool.parameters) : tool.parameters
      }
    ])
  );
};
var getEnabledTools = (tools) => {
  return Object.fromEntries(
    Object.entries(tools).filter(
      ([_, tool]) => !tool.disabled && tool.type !== "backend"
    )
  );
};
var EdgeModelAdapter = class {
  constructor(options) {
    this.options = options;
  }
  async *run({
    messages,
    runConfig,
    abortSignal,
    context,
    unstable_assistantMessageId,
    unstable_getMessage
  }) {
    const headersValue = typeof this.options.headers === "function" ? await this.options.headers() : this.options.headers;
    const headers = new Headers(headersValue);
    headers.set("Content-Type", "application/json");
    const result = await fetch(this.options.api, {
      method: "POST",
      headers,
      credentials: this.options.credentials ?? "same-origin",
      body: JSON.stringify({
        system: context.system,
        messages: this.options.unstable_AISDKInterop ? toLanguageModelMessages(messages, {
          unstable_includeId: this.options.unstable_sendMessageIds || this.options.sendExtraMessageFields
        }) : toCoreMessages(messages, {
          unstable_includeId: this.options.unstable_sendMessageIds || this.options.sendExtraMessageFields
        }),
        tools: this.options.unstable_AISDKInterop === "v2" ? toAISDKTools(getEnabledTools(context.tools ?? {})) : toLanguageModelTools(getEnabledTools(context.tools ?? {})),
        unstable_assistantMessageId,
        runConfig,
        ...context.callSettings,
        ...context.config,
        ...this.options.body
      }),
      signal: abortSignal
    });
    await this.options.onResponse?.(result);
    try {
      if (!result.ok) {
        throw new Error(`Status ${result.status}: ${await result.text()}`);
      }
      if (!result.body) {
        throw new Error("Response body is null");
      }
      const stream = result.body.pipeThrough(new DataStreamDecoder()).pipeThrough(unstable_toolResultStream(context.tools, abortSignal)).pipeThrough(new AssistantMessageAccumulator());
      yield* asAsyncIterableStream(stream);
      this.options.onFinish?.(unstable_getMessage());
    } catch (error) {
      this.options.onError?.(error);
      throw error;
    }
  }
};
export {
  EdgeModelAdapter
};
//# sourceMappingURL=EdgeModelAdapter.js.map