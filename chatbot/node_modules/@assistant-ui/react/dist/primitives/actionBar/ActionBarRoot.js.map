{"version":3,"sources":["../../../src/primitives/actionBar/ActionBarRoot.tsx"],"sourcesContent":["\"use client\";\n\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { type ComponentRef, forwardRef, ComponentPropsWithoutRef } from \"react\";\nimport {\n  useActionBarFloatStatus,\n  HideAndFloatStatus,\n} from \"./useActionBarFloatStatus\";\n\ntype PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;\n\nexport namespace ActionBarPrimitiveRoot {\n  export type Element = ComponentRef<typeof Primitive.div>;\n  export type Props = PrimitiveDivProps & {\n    hideWhenRunning?: boolean | undefined;\n    autohide?: \"always\" | \"not-last\" | \"never\" | undefined;\n    autohideFloat?: \"always\" | \"single-branch\" | \"never\" | undefined;\n  };\n}\n\nexport const ActionBarPrimitiveRoot = forwardRef<\n  ActionBarPrimitiveRoot.Element,\n  ActionBarPrimitiveRoot.Props\n>(({ hideWhenRunning, autohide, autohideFloat, ...rest }, ref) => {\n  const hideAndfloatStatus = useActionBarFloatStatus({\n    hideWhenRunning,\n    autohide,\n    autohideFloat,\n  });\n\n  if (hideAndfloatStatus === HideAndFloatStatus.Hidden) return null;\n\n  return (\n    <Primitive.div\n      {...(hideAndfloatStatus === HideAndFloatStatus.Floating\n        ? { \"data-floating\": \"true\" }\n        : null)}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nActionBarPrimitiveRoot.displayName = \"ActionBarPrimitive.Root\";\n"],"mappings":";;;AAEA,SAAS,iBAAiB;AAC1B,SAA4B,kBAA4C;AACxE;AAAA,EACE;AAAA,EACA;AAAA,OACK;AA0BH;AAbG,IAAM,yBAAyB,WAGpC,CAAC,EAAE,iBAAiB,UAAU,eAAe,GAAG,KAAK,GAAG,QAAQ;AAChE,QAAM,qBAAqB,wBAAwB;AAAA,IACjD;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,MAAI,uBAAuB,mBAAmB,OAAQ,QAAO;AAE7D,SACE;AAAA,IAAC,UAAU;AAAA,IAAV;AAAA,MACE,GAAI,uBAAuB,mBAAmB,WAC3C,EAAE,iBAAiB,OAAO,IAC1B;AAAA,MACH,GAAG;AAAA,MACJ;AAAA;AAAA,EACF;AAEJ,CAAC;AAED,uBAAuB,cAAc;","names":[]}